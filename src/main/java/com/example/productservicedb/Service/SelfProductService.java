package com.example.productservicedb.Service;

import com.example.productservicedb.CustomExceptions.ProductNotFoundExcep;
import com.example.productservicedb.Models.Category;
import com.example.productservicedb.Models.Product;
import com.example.productservicedb.Repositories.CategoryRepository;
import com.example.productservicedb.Repositories.ProductRepository;
import org.springframework.stereotype.Service;

import java.util.Optional;

//In this SelfProductService we need to fetch data from the repository
@Service("SelfProductSerivce")
//@Primary
public class SelfProductService implements ProductInterface {
    //create a reference of ProductRepository
    //Inject the dependency ( Spring creates the implementation, Spring has a library of jpa, jpa is using hibernate) (Hibernate does that)
    //when we inject the dependency that implementation gets injected to the reference.
    private ProductRepository productRepository;
    private CategoryRepository categoryRepository;
    public SelfProductService(ProductRepository productRepository, CategoryRepository categoryRepository) {
        this.productRepository = productRepository;
        this.categoryRepository = categoryRepository;
    }

    @Override
    public Product getProductById(Long id) {
        Optional<Product> optionalProduct= productRepository.findById(id);
        if(optionalProduct.isEmpty()) {
            throw new ProductNotFoundExcep("Product not found with id: ",id);
        }
        return optionalProduct.get();
    }
//    Using DTo is the good practice
    /*
    * @Override
public ProductDTO getProductById(Long id) {
    Optional<Product> optionalProduct= productRepository.findById(id);
    if(optionalProduct.isEmpty()) {
        throw new ProductNotFoundExcep("Product not found with id: ",id);
    }
    Product product = optionalProduct.get();

    // convert Product to ProductDTO
    ProductDTO productDTO = convertToProductDTO(product);

    return productDTO;
    * we can write a function to convert from product to productDTO
}*/
    @Override
    public Product createProduct(Product product) {
//        System.out.println("DEBUG");
        Category category = product.getCategory();
        Category savedCategory = null;
        if(category.getId()==null){ //save the category if it is not present
            //The savedCategory attribute will have id generated by the database(this executes if there is no id ot this category)
              savedCategory= categoryRepository.save(category);
            product.setCategory(savedCategory);
        }

        //So, in my product table only category id is stored if I want complete category
        //I have to fetch data from category table using category id
        return productRepository.save(product);
//        Product prd1= productRepository.save(product);
//        Optional<Category> optionalCat= categoryRepository.findById(prd1.getCategory().getId());
//        prd1.setCategory(optionalCat.get());
//        return prd1;

    }


}
